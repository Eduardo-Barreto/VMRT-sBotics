numero direcaoAtual = 0
numero triangulo = 0
numero alvo = 0
numero distanciaParede = 0
numero alinhamentoBusca = 0
numero tempoVoltar = 0
numero retorno = 0
numero diferencaUltra = 0

tarefa vitimaEntrada{
    escrever(1, "Empurrando vitima da entrada")
    tras(150)
    esperar(1000)
    frente(300)
    esperar(300)
    repita 4 vezes {
        tras(100)
        esperar(500)
        frente(150)
        esperar(400)
    }
    parar()
    enquanto (ultra(2)<20) farei {
        frente(100)
    }
    parar()
}

tarefa desviarVitima{
    escrever(1, "Desviando da vítima, procurando área segura")
    se(luz(6) > 13) entao{
        se (resto(contador, 3) == 0) entao {
            rotacionar (500, 25)
            frente(250)
            esperar(800)
            rotacionar (500, 0-25)
        }
        senao{
            rotacionar (500, 0-25)
            frente(250)
            esperar(800)
            rotacionar (500, 25)
        }
        contador = contador+1
        alvo = alvo + 2000
    }
}

tarefa  buscarVitima{
    escrever(1, "Possível vítima, indo verificar")
    alinhamentoBusca = direcao()
    tras(200)
    esperar(200)
    enquanto (verdadeiro) farei {
        zerartemporizador()
        enquanto (ultra(3) > 30) farei {
            frente(250)
        }
        tempoVoltar = temporizador()
        se (ultra(1) < 10) entao {
            interromper()
        }
        parar()
        girarcima(1400)
        baixar(1400)
        girarbaixo(1000)
        frente(300)
        esperar(450)
        levantar(700)
        parar()
        levantar(700)
        girarcima(1500)
        tempoVoltar = tempoVoltar + 400
        interromper()
    }
}

tarefa  alinharAreaSegura{
    escrever(1, "Alinhamento da área segura")
    se (direcao() > triangulo + 1) entao {
        enquanto(direcao() < triangulo - 1 ou direcao() > triangulo + 1)farei{
            esquerda(1000)
        }
    }
    senao{
        enquanto(direcao() < triangulo - 1 ou direcao() > triangulo + 1)farei{
            direita(1000)
        }
    }
    
    alvo = triangulo + 90
    se (alvo > 360) entao {
        alvo = alvo - 360
    }

    direcaoAtual = direcao()
    enquanto(direcaoAtual < alvo - 1 ou direcaoAtual > alvo + 1) farei{
        direita(1000)
        direcaoAtual = direcao()
    }
    parar()

    enquanto (ultra(1) > 10) farei {
        frente(250)
    }
    parar()

    enquanto (ultra(1) < 70) farei {
        tras(250)
    }
    parar()
    direita(1000)
    esperar(200)
}

tarefa levarVitima {
    escrever(1, "Levando vítima")
    direcaoAtual = direcao()
    retorno = alinhamentoBusca + 180
    se (retorno > 360) entao {
        retorno = retorno - 360
    }
    enquanto(direcaoAtual < retorno -2 ou direcaoAtual > retorno + 2) farei {
        esquerda(1000)
        direcaoAtual = direcao()
    }
    parar()
    enquanto(cor(6) != "PRETO" ou ultra(1) > 75)farei{
        frente(150)
    }
    parar()
    baixar(700)
    tras(150)
    esperar(200)
    frente(150)
    esperar(200)
    tras(150)
    esperar(200)
    frente(150)
    esperar(200)
    levantar(700)
    girarbaixo(1400)
    alinharAreaSegura()
}
